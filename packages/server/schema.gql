# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateTask {
  avg: TaskAvgAggregate
  count: TaskCountAggregate
  max: TaskMaxAggregate
  min: TaskMinAggregate
  sum: TaskSumAggregate
}

type AggregateUser {
  avg: UserAvgAggregate
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
  sum: UserSumAggregate
}

input CommentCreateNestedManyWithoutTaskInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTaskInput!]
  create: [CommentCreateWithoutTaskInput!]
}

input CommentCreateOrConnectWithoutTaskInput {
  create: CommentCreateWithoutTaskInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutTaskInput {
  content: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  content: StringFilter
  id: IntFilter
  taskId: IntNullableFilter
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutTaskInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutTaskInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTaskInput!]
  create: [CommentCreateWithoutTaskInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutTaskInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTaskInput!]
}

input CommentUpdateWithWhereUniqueWithoutTaskInput {
  data: CommentUpdateWithoutTaskInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutTaskInput {
  content: StringFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutTaskInput {
  create: CommentCreateWithoutTaskInput!
  update: CommentUpdateWithoutTaskInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  id: IntFilter
  task: TaskRelationFilter
  taskId: IntNullableFilter
}

input CommentWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  assigneeId: Int
  creatorId: Int!
  description: String
  id: Int!
  title: String!
}

type TaskAvgAggregate {
  assigneeId: Float
  creatorId: Float!
  id: Float!
}

type TaskCountAggregate {
  _all: Int!
  assigneeId: Int
  creatorId: Int!
  description: Int
  id: Int!
  title: Int
}

input TaskCreateInput {
  assignee: UserCreateNestedOneWithoutAssigneeTasksInput
  comments: CommentCreateNestedManyWithoutTaskInput
  creator: UserCreateNestedOneWithoutCreatorTasksInput!
  description: String
  title: String!
}

input TaskCreateNestedManyWithoutAssigneeInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutAssigneeInput!]
  create: [TaskCreateWithoutAssigneeInput!]
}

input TaskCreateNestedManyWithoutCreatorInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutCreatorInput!]
  create: [TaskCreateWithoutCreatorInput!]
}

input TaskCreateOrConnectWithoutAssigneeInput {
  create: TaskCreateWithoutAssigneeInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutCreatorInput {
  create: TaskCreateWithoutCreatorInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutAssigneeInput {
  comments: CommentCreateNestedManyWithoutTaskInput
  creator: UserCreateNestedOneWithoutCreatorTasksInput!
  description: String
  title: String!
}

input TaskCreateWithoutCreatorInput {
  assignee: UserCreateNestedOneWithoutAssigneeTasksInput
  comments: CommentCreateNestedManyWithoutTaskInput
  description: String
  title: String!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  assigneeId: Int
  creatorId: Int!
  description: String
  id: Int!
  title: String
}

type TaskMinAggregate {
  assigneeId: Int
  creatorId: Int!
  description: String
  id: Int!
  title: String
}

input TaskOrderByInput {
  assignee: UserOrderByInput
  assigneeId: SortOrder
  creator: UserOrderByInput
  creatorId: SortOrder
  description: SortOrder
  id: SortOrder
  title: SortOrder
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

enum TaskScalarFieldEnum {
  assigneeId
  creatorId
  description
  id
  title
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  assigneeId: IntNullableFilter
  creatorId: IntFilter
  description: StringNullableFilter
  id: IntFilter
  title: StringFilter
}

type TaskSumAggregate {
  assigneeId: Int
  creatorId: Int!
  id: Int!
}

input TaskUpdateInput {
  assignee: UserUpdateOneWithoutAssigneeTasksInput
  comments: CommentUpdateManyWithoutTaskInput
  creator: UserUpdateOneRequiredWithoutCreatorTasksInput
  description: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutAssigneeInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutCreatorInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutAssigneeInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutAssigneeInput!]
  create: [TaskCreateWithoutAssigneeInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutAssigneeInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutAssigneeInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutAssigneeInput!]
}

input TaskUpdateManyWithoutCreatorInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutCreatorInput!]
  create: [TaskCreateWithoutCreatorInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutCreatorInput!]
}

input TaskUpdateWithWhereUniqueWithoutAssigneeInput {
  data: TaskUpdateWithoutAssigneeInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutCreatorInput {
  data: TaskUpdateWithoutCreatorInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutAssigneeInput {
  comments: CommentUpdateManyWithoutTaskInput
  creator: UserUpdateOneRequiredWithoutCreatorTasksInput
  description: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpdateWithoutCreatorInput {
  assignee: UserUpdateOneWithoutAssigneeTasksInput
  comments: CommentUpdateManyWithoutTaskInput
  description: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutAssigneeInput {
  create: TaskCreateWithoutAssigneeInput!
  update: TaskUpdateWithoutAssigneeInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutCreatorInput {
  create: TaskCreateWithoutCreatorInput!
  update: TaskUpdateWithoutCreatorInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  assignee: UserRelationFilter
  assigneeId: IntNullableFilter
  comments: CommentListRelationFilter
  creator: UserRelationFilter
  creatorId: IntFilter
  description: StringNullableFilter
  id: IntFilter
  title: StringFilter
}

input TaskWhereUniqueInput {
  id: Int
}

type User {
  assigneeTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  creatorTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  email: String!
  id: Int!
  name: String!
  password: String!
}

type UserAvgAggregate {
  id: Float!
}

type UserCountAggregate {
  _all: Int!
  email: Int
  id: Int!
  name: Int
  password: Int
}

input UserCreateInput {
  assigneeTasks: TaskCreateNestedManyWithoutAssigneeInput
  creatorTasks: TaskCreateNestedManyWithoutCreatorInput
  email: String!
  name: String!
  password: String!
}

input UserCreateNestedOneWithoutAssigneeTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneeTasksInput
  create: UserCreateWithoutAssigneeTasksInput
}

input UserCreateNestedOneWithoutCreatorTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatorTasksInput
  create: UserCreateWithoutCreatorTasksInput
}

input UserCreateOrConnectWithoutAssigneeTasksInput {
  create: UserCreateWithoutAssigneeTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCreatorTasksInput {
  create: UserCreateWithoutCreatorTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAssigneeTasksInput {
  creatorTasks: TaskCreateNestedManyWithoutCreatorInput
  email: String!
  name: String!
  password: String!
}

input UserCreateWithoutCreatorTasksInput {
  assigneeTasks: TaskCreateNestedManyWithoutAssigneeInput
  email: String!
  name: String!
  password: String!
}

type UserMaxAggregate {
  email: String
  id: Int!
  name: String
  password: String
}

type UserMinAggregate {
  email: String
  id: Int!
  name: String
  password: String
}

input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  id
  name
  password
}

type UserSumAggregate {
  id: Int!
}

input UserUpdateInput {
  assigneeTasks: TaskUpdateManyWithoutAssigneeInput
  creatorTasks: TaskUpdateManyWithoutCreatorInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCreatorTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatorTasksInput
  create: UserCreateWithoutCreatorTasksInput
  update: UserUpdateWithoutCreatorTasksInput
  upsert: UserUpsertWithoutCreatorTasksInput
}

input UserUpdateOneWithoutAssigneeTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneeTasksInput
  create: UserCreateWithoutAssigneeTasksInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAssigneeTasksInput
  upsert: UserUpsertWithoutAssigneeTasksInput
}

input UserUpdateWithoutAssigneeTasksInput {
  creatorTasks: TaskUpdateManyWithoutCreatorInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutCreatorTasksInput {
  assigneeTasks: TaskUpdateManyWithoutAssigneeInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutAssigneeTasksInput {
  create: UserCreateWithoutAssigneeTasksInput!
  update: UserUpdateWithoutAssigneeTasksInput!
}

input UserUpsertWithoutCreatorTasksInput {
  create: UserCreateWithoutCreatorTasksInput!
  update: UserUpdateWithoutCreatorTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  assigneeTasks: TaskListRelationFilter
  creatorTasks: TaskListRelationFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  password: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  password: String
}
